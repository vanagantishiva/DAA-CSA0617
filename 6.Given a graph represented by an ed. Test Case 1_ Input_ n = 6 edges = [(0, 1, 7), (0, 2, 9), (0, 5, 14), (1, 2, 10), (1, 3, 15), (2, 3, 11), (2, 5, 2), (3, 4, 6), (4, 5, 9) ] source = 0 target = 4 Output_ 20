import heapq

def dijkstra(n, edges, source, target):
    # Step 1: Build adjacency list from edge list
    adj = {i: [] for i in range(n)}
    for u, v, w in edges:
        adj[u].append((v, w))  # Edge from u to v with weight w
        adj[v].append((u, w))  # Edge from v to u with weight w (undirected graph)

    # Step 2: Initialize distances, priority queue, and visited set
    INF = float('inf')
    dist = [INF] * n
    dist[source] = 0
    pq = [(0, source)]  # Priority queue stores (distance, node)
    visited = [False] * n

    while pq:
        current_dist, u = heapq.heappop(pq)
        
        # If the node is already visited, skip it
        if visited[u]:
            continue
        visited[u] = True

        # If we reached the target, return the distance
        if u == target:
            return current_dist
        
        # Step 3: Relax the edges
        for v, weight in adj[u]:
            if not visited[v] and current_dist + weight < dist[v]:
                dist[v] = current_dist + weight
                heapq.heappush(pq, (dist[v], v))

    # If we couldn't reach the target, return -1
    return -1

# Test case
n = 6
edges = [
    (0, 1, 7), (0, 2, 9), (0, 5, 14),
    (1, 2, 10), (1, 3, 15),
    (2, 3, 11), (2, 5, 2),
    (3, 4, 6), (4, 5, 9)
]
source = 0
target = 4

# Run Dijkstra's algorithm
result = dijkstra(n, edges, source, target)
print(result)  # Output: 20
