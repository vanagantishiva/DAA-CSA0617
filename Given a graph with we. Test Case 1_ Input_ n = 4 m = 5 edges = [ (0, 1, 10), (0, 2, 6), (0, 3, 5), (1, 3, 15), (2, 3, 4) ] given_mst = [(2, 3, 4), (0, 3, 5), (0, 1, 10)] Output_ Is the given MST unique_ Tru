class DisjointSet:
    def __init__(self, n):
        self.parent = list(range(n))
        self.rank = [0] * n
    
    def find(self, x):
        if self.parent[x] != x:
            self.parent[x] = self.find(self.parent[x])  # Path compression
        return self.parent[x]
    
    def union(self, x, y):
        rootX = self.find(x)
        rootY = self.find(y)
        
        if rootX != rootY:
            # Union by rank
            if self.rank[rootX] > self.rank[rootY]:
                self.parent[rootY] = rootX
            elif self.rank[rootX] < self.rank[rootY]:
                self.parent[rootX] = rootY
            else:
                self.parent[rootY] = rootX
                self.rank[rootX] += 1

def kruskal(n, edges):
    # Sort edges based on their weight
    edges.sort(key=lambda x: x[2])
    
    # Initialize the Disjoint Set (Union-Find) structure
    dsu = DisjointSet(n)
    
    mst = []  # To store the edges in the MST
    total_weight = 0  # To store the total weight of the MST
    
    for u, v, weight in edges:
        # If the vertices u and v are in different sets, add the edge to the MST
        if dsu.find(u) != dsu.find(v):
            dsu.union(u, v)
            mst.append((u, v, weight))
            total_weight += weight
            
    return mst, total_weight

def is_mst_unique(n, edges, given_mst):
    # First, we check if the given MST is valid
    # Step 1: Check if given MST has exactly n-1 edges
    if len(given_mst) != n - 1:
        return False, []

    # Step 2: Use Kruskal's algorithm to get the MST
    mst, mst_weight = kruskal(n, edges)
    
    # Step 3: Check if the total weight of the given MST matches with the Kruskal's MST
    given_mst_weight = sum(weight for u, v, weight in given_mst)
    
    if given_mst_weight != mst_weight:
        return False, []
    
    # Step 4: Check if the edges in the given MST are exactly the same as the MST obtained
    if sorted(given_mst, key=lambda x: (x[0], x[1], x[2])) == sorted(mst, key=lambda x: (x[0], x[1], x[2])):
        # Given MST is valid and matches the Kruskal's result
        return True, []
    
    # Step 5: Check for alternative MSTs
    # If the given MST isn't unique, try to find alternative edges
    # To do this, we check for edges that can be swapped without changing the total weight
    alternative_mst = None
    for edge in edges:
        if edge not in given_mst:
            alternative_mst = given_mst + [edge]
            break
    
    if alternative_mst:
        return False, alternative_mst
    return True, []

# Test Case 1
n = 4  # Number of nodes
m = 5  # Number of edges
edges = [(0, 1, 10), (0, 2, 6), (0, 3, 5), (1, 3, 15), (2, 3, 4)]
given_mst = [(2, 3, 4), (0, 3, 5), (0, 1, 10)]

# Check if the given MST is unique
is_unique, alternative_mst = is_mst_unique(n, edges, given_mst)

# Output result
if is_unique:
    print("Is the given MST unique? True")
else:
    print("Is the given MST unique? False")
    print("Another possible MST:", alternative_mst)
