import heapq

def networkDelayTime(times, n, k):
    # Step 1: Build the graph as an adjacency list
    graph = {i: [] for i in range(1, n+1)}
    for u, v, w in times:
        graph[u].append((v, w))
    
    # Step 2: Initialize the distance table, where inf means unreachable
    dist = {i: float('inf') for i in range(1, n+1)}
    dist[k] = 0  # The signal starts from node k
    
    # Step 3: Use a priority queue to implement Dijkstra's algorithm
    pq = [(0, k)]  # (distance, node)
    
    while pq:
        current_dist, node = heapq.heappop(pq)
        
        # If the current distance is already greater, skip
        if current_dist > dist[node]:
            continue
        
        # Explore all neighbors of the current node
        for neighbor, weight in graph[node]:
            new_dist = current_dist + weight
            
            # If a shorter path is found, update the distance and add to priority queue
            if new_dist < dist[neighbor]:
                dist[neighbor] = new_dist
                heapq.heappush(pq, (new_dist, neighbor))
    
    # Step 4: Find the maximum distance (time it takes for the last node to receive the signal)
    max_time = max(dist.values())
    
    # If any node is unreachable (infinity), return -1
    if max_time == float('inf'):
        return -1
    
    return max_time

# Test case
times = [[2, 1, 1], [2, 3, 1], [3, 4, 1]]
n = 4
k = 2
print(networkDelayTime(times, n, k))  # Output: 2
