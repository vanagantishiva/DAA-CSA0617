import itertools

# Function to calculate the total cost of a given assignment
def total_cost(assignment, cost_matrix):
    cost = 0
    for worker, task in assignment:
        cost += cost_matrix[worker][task]
    return cost

# Function to solve the assignment problem using exhaustive search
def assignment_problem(cost_matrix):
    num_workers = len(cost_matrix)
    num_tasks = len(cost_matrix[0])

    # Generate all permutations of workers to tasks (assign workers to tasks)
    worker_indices = list(range(num_workers))
    task_indices = list(range(num_tasks))

    # Generate all possible assignments (permutations of worker-task pairings)
    min_cost = float('inf')
    best_assignment = []

    for perm in itertools.permutations(task_indices):
        # Create an assignment where each worker is assigned to the task in the perm
        assignment = [(worker, perm[worker]) for worker in worker_indices]
        
        # Calculate the total cost of this assignment
        current_cost = total_cost(assignment, cost_matrix)
        
        # Check if this assignment has a lower cost than the previous best
        if current_cost < min_cost:
            min_cost = current_cost
            best_assignment = assignment

    # Return the optimal assignment and the corresponding cost
    return best_assignment, min_cost

# Test cases
cost_matrix_1 = [
    [3, 10, 7],
    [8, 5, 12],
    [4, 6, 9]
]

cost_matrix_2 = [
    [15, 9, 4],
    [8, 7, 18],
    [6, 12, 11]
]

# Solve the assignment problem for both test cases
best_assignment_1, min_cost_1 = assignment_problem(cost_matrix_1)
best_assignment_2, min_cost_2 = assignment_problem(cost_matrix_2)

# Print the results
print("Test Case 1:")
print("Optimal Assignment:", [(f"worker {worker+1}", f"task {task+1}") for worker, task in best_assignment_1])
print("Total Cost:", min_cost_1)

print("\nTest Case 2:")
print("Optimal Assignment:", [(f"worker {worker+1}", f"task {task+1}") for worker, task in best_assignment_2])
print("Total Cost:", min_cost_2)
