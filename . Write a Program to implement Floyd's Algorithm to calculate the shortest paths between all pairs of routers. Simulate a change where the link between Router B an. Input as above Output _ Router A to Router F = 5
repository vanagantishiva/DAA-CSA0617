import sys

def floyd_warshall(n, edges):
    inf = sys.maxsize
    dist = [[inf] * n for _ in range(n)]

    # Initialize distances
    for i in range(n):
        dist[i][i] = 0

    for u, v, w in edges:
        dist[u][v] = w
        dist[v][u] = w  # Assuming undirected graph

    # Floyd-Warshall Algorithm
    for k in range(n):
        for i in range(n):
            for j in range(n):
                if dist[i][k] < inf and dist[k][j] < inf:
                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])

    return dist

def print_matrix(matrix):
    for row in matrix:
        print(row)

# Initial setup
edges = [
    (0, 1, 1), (0, 2, 5),
    (1, 2, 2), (1, 3, 1),
    (2, 4, 3),
    (3, 4, 1), (3, 5, 6),
    (4, 5, 2)
]

n = 6  # Number of routers (A-F mapped to 0-5)
print("Initial Calculation:\n")
initial_dist = floyd_warshall(n, edges)
print("Distance Matrix Before Link Failure:")
print_matrix(initial_dist)
print(f"\nShortest path from Router A to Router F: {initial_dist[0][5]}")

# Simulate link failure between Router B and Router D
print("\nSimulating link failure between Router B and Router D...\n")
edges = [edge for edge in edges if edge != (1, 3, 1) and edge != (3, 1, 1)]  # Remove link B-D
updated_dist = floyd_warshall(n, edges)
print("Distance Matrix After Link Failure:")
print_matrix(updated_dist)
print(f"\nShortest path from Router A to Router F after link failure: {updated_dist[0][5]}")
