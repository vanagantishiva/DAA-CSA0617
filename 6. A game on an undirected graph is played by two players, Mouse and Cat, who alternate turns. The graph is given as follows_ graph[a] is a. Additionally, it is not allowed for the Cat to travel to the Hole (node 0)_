def catMouseGame(graph):
    n = len(graph)
    
    # Memoization cache to store the results of subproblems
    # dp[mouse][cat][turn] will store:
    # 0 -> Draw, 1 -> Mouse wins, 2 -> Cat wins
    dp = {}

    def dfs(mouse, cat, turn):
        # Base case: Mouse reaches the hole
        if mouse == 0:
            return 1  # Mouse wins
        
        # Base case: Cat catches the mouse
        if mouse == cat:
            return 2  # Cat wins
        
        # Check if the result has already been computed
        if (mouse, cat, turn) in dp:
            return dp[(mouse, cat, turn)]
        
        # If it is the mouse's turn (turn == 1)
        if turn == 1:
            # Try all moves for the mouse
            result = 2  # Assume cat wins initially
            for next_mouse in graph[mouse]:
                if next_mouse != cat:  # Mouse cannot go where the cat is
                    result = min(result, dfs(next_mouse, cat, 3-turn))
            dp[(mouse, cat, turn)] = result
            return result
        else:  # It is the cat's turn (turn == 2)
            result = 1  # Assume mouse wins initially
            for next_cat in graph[cat]:
                if next_cat != 0:  # Cat cannot go to the hole (node 0)
                    result = min(result, dfs(mouse, next_cat, 3-turn))
            dp[(mouse, cat, turn)] = result
            return result
    
    # Start DFS from the initial positions: Mouse at 1, Cat at 2
    return dfs(1, 2, 1)  # Start with the mouse's turn

# Example test cases
graph1 = [[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]
graph2 = [[1,3],[0],[3],[0,2]]

print(catMouseGame(graph1))  # Output: 0 (draw)
print(catMouseGame(graph2))  # Output: 1 (mouse wins)
