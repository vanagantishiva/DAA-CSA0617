def findTargetSumWays(nums, target):
    total_sum = sum(nums)
    
    # If the target is impossible, return 0
    if (total_sum + target) % 2 != 0 or total_sum < target:
        return 0
    
    S_pos = (total_sum + target) // 2
    
    # DP array to store the number of ways to achieve each sum up to S_pos
    dp = [0] * (S_pos + 1)
    dp[0] = 1  # There's one way to make sum 0 (by taking no elements)
    
    # Iterate through each number in nums
    for num in nums:
        # Traverse backwards to prevent overwriting results for the same iteration
        for i in range(S_pos, num - 1, -1):
            dp[i] += dp[i - num]
    
    # The answer is the number of ways to achieve sum S_pos
    return dp[S_pos]

# Test case
nums = [1, 1, 1, 1, 1]
target = 3
print(findTargetSumWays(nums, target))  # Output: 5
