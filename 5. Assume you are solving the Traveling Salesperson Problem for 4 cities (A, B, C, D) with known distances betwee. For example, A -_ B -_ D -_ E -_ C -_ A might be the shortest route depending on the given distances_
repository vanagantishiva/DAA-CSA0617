#include <stdio.h>
#include <limits.h>

#define N 5  // Number of cities (A, B, C, D, E)
#define INF INT_MAX

// Distance matrix for the cities (symmetric)
int dist[N][N] = {
    {0, 10, 15, 20, 25},  // A
    {10, 0, 35, 25, 30},  // B
    {15, 35, 0, 30, 20},  // C
    {20, 25, 30, 0, 15},  // D
    {25, 30, 20, 15, 0}   // E
};

// DP table to store the minimum distance for subsets of cities
int dp[1 << N][N];

// Function to solve the TSP using Dynamic Programming with Bitmasking
int tsp(int mask, int pos) {
    // If all cities have been visited, return the distance to the starting city (A)
    if (mask == (1 << N) - 1) {
        return dist[pos][0];
    }

    // If the result is already calculated, return it
    if (dp[mask][pos] != -1) {
        return dp[mask][pos];
    }

    int ans = INF;
    // Try to go to all unvisited cities
    for (int city = 0; city < N; city++) {
        if ((mask & (1 << city)) == 0) {
            int newAns = dist[pos][city] + tsp(mask | (1 << city), city);
            ans = (ans < newAns) ? ans : newAns;
        }
    }

    // Store the result and return it
    dp[mask][pos] = ans;
    return ans;
}

int main() {
    // Initialize the DP table with -1 (unvisited)
    for (int i = 0; i < (1 << N); i++) {
        for (int j = 0; j < N; j++) {
            dp[i][j] = -1;
        }
    }

    // Solve the TSP starting from city A (index 0)
    int min_cost = tsp(1, 0);  // Mask 1 means only city A is visited, starting at city A

    printf("The shortest route and its total distance: %d\n", min_cost);

    return 0;
}
