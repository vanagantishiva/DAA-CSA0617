def champagneTower(poured, query_row, query_glass):
    # Create a 2D array to represent the glasses.
    # We need (query_row+1) rows as we need to simulate up to that row.
    glasses = [[0] * (i + 1) for i in range(query_row + 1)]
    
    # Pour the champagne into the top glass.
    glasses[0][0] = poured
    
    # Process each row to distribute the champagne.
    for i in range(query_row):
        for j in range(i + 1):
            # If the glass has more than 1 cup, distribute the excess equally.
            if glasses[i][j] > 1:
                excess = glasses[i][j] - 1
                glasses[i][j] = 1  # The glass can hold a maximum of 1 cup.
                glasses[i + 1][j] += excess / 2  # Distribute to the left glass in the next row.
                glasses[i + 1][j + 1] += excess / 2  # Distribute to the right glass in the next row.
    
    # Return the amount of champagne in the specified glass (query_row, query_glass).
    return min(1, glasses[query_row][query_glass])

# Test cases
print(champagneTower(1, 1, 1))  # Expected: 0.00000
print(champagneTower(2, 1, 1))  # Expected: 0.50000
