def merge_sort(arr):
    # Base case: an array of length 1 is already sorted
    if len(arr) <= 1:
        return arr
    
    # Divide the array into two halves
    mid = len(arr) // 2
    left_half = merge_sort(arr[:mid])  # Recursively sort the left half
    right_half = merge_sort(arr[mid:])  # Recursively sort the right half
    
    # Merge the sorted halves
    return merge(left_half, right_half)

def merge(left, right):
    sorted_arr = []
    i = j = 0
    
    # Merge two sorted lists into a single sorted list
    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            sorted_arr.append(left[i])
            i += 1
        else:
            sorted_arr.append(right[j])
            j += 1
    
    # Append any remaining elements from both halves
    sorted_arr.extend(left[i:])
    sorted_arr.extend(right[j:])
    
    return sorted_arr


# Test Case

# Test Case 1: General case with positive and negative numbers
arr1 = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]
print("Sorted array:", merge_sort(arr1))  # Expected Output: [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]

# Test Case 2: List with all identical elements
arr2 = [7, 7, 7, 7]
print("Sorted array:", merge_sort(arr2))  # Expected Output: [7, 7, 7, 7]

# Test Case 3: List with a single element
arr3 = [5]
print("Sorted array:", merge_sort(arr3))  # Expected Output: [5]
