 import bisect

def maxProfit(startTime, endTime, profit):
    # Step 1: Create a list of jobs where each job is a tuple (startTime, endTime, profit)
    jobs = list(zip(startTime, endTime, profit))
    
    # Step 2: Sort jobs by their end time
    jobs.sort(key=lambda x: x[1])

    # Step 3: Define a DP array where dp[i] represents the maximum profit up to job i
    n = len(jobs)
    dp = [0] * (n + 1)
    
    # Step 4: Function to find the index of the latest job that does not overlap with the current job
    def findLastNonConflicting(i):
        # Binary search to find the last job that ends before job[i]'s start time
        lo, hi = 0, i - 1
        while lo <= hi:
            mid = (lo + hi) // 2
            if jobs[mid][1] <= jobs[i][0]:
                if jobs[mid + 1][1] <= jobs[i][0]:
                    lo = mid + 1
                else:
                    return mid
            else:
                hi = mid - 1
        return -1
    
    # Step 5: Fill the DP array
    for i in range(1, n + 1):
        # Include the current job
        include_profit = jobs[i - 1][2]
        last_non_conflicting = findLastNonConflicting(i - 1)
        if last_non_conflicting != -1:
            include_profit += dp[last_non_conflicting + 1]
        
        # Exclude the current job
        dp[i] = max(dp[i - 1], include_profit)
    
    # Step 6: The last element of dp array will hold the maximum profit
    return dp[n]

# Example test case
startTime = [1, 2, 3, 3]
endTime = [3, 4, 5, 6]
profit = [50, 10, 40, 70]
print(maxProfit(startTime, endTime, profit))  # Output: 120
