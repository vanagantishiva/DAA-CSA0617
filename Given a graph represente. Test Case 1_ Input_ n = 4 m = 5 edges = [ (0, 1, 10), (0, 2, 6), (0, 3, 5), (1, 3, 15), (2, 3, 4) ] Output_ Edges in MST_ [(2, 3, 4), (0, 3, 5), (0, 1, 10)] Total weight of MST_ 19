# Disjoint Set (Union-Find) class
class DisjointSet:
    def __init__(self, n):
        self.parent = list(range(n))
        self.rank = [0] * n
    
    def find(self, x):
        if self.parent[x] != x:
            self.parent[x] = self.find(self.parent[x])  # Path compression
        return self.parent[x]
    
    def union(self, x, y):
        rootX = self.find(x)
        rootY = self.find(y)
        
        if rootX != rootY:
            # Union by rank
            if self.rank[rootX] > self.rank[rootY]:
                self.parent[rootY] = rootX
            elif self.rank[rootX] < self.rank[rootY]:
                self.parent[rootX] = rootY
            else:
                self.parent[rootY] = rootX
                self.rank[rootX] += 1

def kruskal(n, edges):
    # Sort edges based on their weight
    edges.sort(key=lambda x: x[2])
    
    # Initialize the Disjoint Set (Union-Find) structure
    dsu = DisjointSet(n)
    
    mst = []  # To store the edges in the MST
    total_weight = 0  # To store the total weight of the MST
    
    for u, v, weight in edges:
        # If the vertices u and v are in different sets, add the edge to the MST
        if dsu.find(u) != dsu.find(v):
            dsu.union(u, v)
            mst.append((u, v, weight))
            total_weight += weight
            
    return mst, total_weight

# Test Case 1
n = 4  # Number of nodes
m = 5  # Number of edges
edges = [(0, 1, 10), (0, 2, 6), (0, 3, 5), (1, 3, 15), (2, 3, 4)]

# Run Kruskal's Algorithm
mst, total_weight = kruskal(n, edges)

# Output the result
print("Edges in MST:", mst)
print("Total weight of MST:", total_weight)
