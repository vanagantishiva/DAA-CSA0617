def is_hamiltonian_cycle(n, edges):
    # Step 1: Build the adjacency matrix from the edge list
    adj_matrix = [[0] * n for _ in range(n)]
    for u, v in edges:
        adj_matrix[u][v] = 1
        adj_matrix[v][u] = 1
    
    # Step 2: Create a list to keep track of visited vertices
    visited = [False] * n
    
    # Step 3: Function to check if there is a Hamiltonian cycle using backtracking
    def backtrack(curr_vertex, count):
        # If we've visited all vertices, check if we can return to the starting vertex
        if count == n:
            # If there is an edge back to the starting vertex, we have a cycle
            if adj_matrix[curr_vertex][0] == 1:
                return True
            return False
        
        # Try to visit every vertex from the current vertex
        for next_vertex in range(n):
            if not visited[next_vertex] and adj_matrix[curr_vertex][next_vertex] == 1:
                visited[next_vertex] = True
                if backtrack(next_vertex, count + 1):
                    return True
                visited[next_vertex] = False
        
        return False
    
    # Step 4: Start the backtracking from vertex 0
    visited[0] = True
    return backtrack(0, 1)

# Example Input:
edges = [(0, 1), (1, 2), (2, 3), (3, 0), (0, 2), (2, 4), (4, 0)]
n = 5

# Call the function and print the result
print(is_hamiltonian_cycle(n, edges))  # Output: True or False
