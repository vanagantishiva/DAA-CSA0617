import itertools

def generate_subset_sums(arr):
    """
    Generate all possible subset sums of the array arr.
    """
    subset_sums = set()  # Use a set to avoid duplicate sums
    for r in range(len(arr) + 1):
        for subset in itertools.combinations(arr, r):
            subset_sums.add(sum(subset))
    return subset_sums

def meet_in_the_middle(arr, target_sum):
    """
    Implement the Meet in the Middle technique to check if there is a subset
    that sums exactly to target_sum.
    """
    n = len(arr)
    
    # Step 1: Split the array into two halves
    left_half = arr[:n//2]
    right_half = arr[n//2:]
    
    # Step 2: Generate all possible subset sums for both halves
    left_sums = generate_subset_sums(left_half)
    right_sums = generate_subset_sums(right_half)
    
    # Step 3: For each sum in left_sums, check if target_sum - sum exists in right_sums
    for left_sum in left_sums:
        if (target_sum - left_sum) in right_sums:
            return True
    
    # If no pair found, return False
    return False

# Test cases
arr1 = [1, 3, 9, 2, 7, 12]
target1 = 15
arr2 = [3, 34, 4, 12, 5, 2]
target2 = 15

print(f"Subset sum equals {target1}: {meet_in_the_middle(arr1, target1)}")
print(f"Subset sum equals {target2}: {meet_in_the_middle(arr2, target2)}")
